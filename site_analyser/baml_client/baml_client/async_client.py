# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def AnalyzeContentRelevance(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.ContentRelevanceResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeContentRelevance(image=image,html_content=html_content,url=url,context=context,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeContentRelevance", args={
                "image": image,"html_content": html_content,"url": url,"context": context,
            })
            return typing.cast(types.ContentRelevanceResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeLanguageCapabilities(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> types.LanguageAnalysisResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeLanguageCapabilities(image=image,html_content=html_content,url=url,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeLanguageCapabilities", args={
                "image": image,"html_content": html_content,"url": url,
            })
            return typing.cast(types.LanguageAnalysisResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzePersonalDataRequests(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PersonalDataResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzePersonalDataRequests(image=image,html_content=html_content,url=url,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzePersonalDataRequests", args={
                "image": image,"html_content": html_content,"url": url,
            })
            return typing.cast(types.PersonalDataResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzePolicyLinks(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PolicyAnalysisResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzePolicyLinks(image=image,html_content=html_content,url=url,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzePolicyLinks", args={
                "image": image,"html_content": html_content,"url": url,
            })
            return typing.cast(types.PolicyAnalysisResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeUKGovTrademarksWithClaude(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.TrademarkAnalysisResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeUKGovTrademarksWithClaude(image=image,url=url,context=context,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeUKGovTrademarksWithClaude", args={
                "image": image,"url": url,"context": context,
            })
            return typing.cast(types.TrademarkAnalysisResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeUKGovernmentTrademarks(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.TrademarkAnalysisResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeUKGovernmentTrademarks(image=image,url=url,context=context,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeUKGovernmentTrademarks", args={
                "image": image,"url": url,"context": context,
            })
            return typing.cast(types.TrademarkAnalysisResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeWebsiteCompleteness(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> types.WebsiteCompletenessResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.AnalyzeWebsiteCompleteness(image=image,html_content=html_content,url=url,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeWebsiteCompleteness", args={
                "image": image,"html_content": html_content,"url": url,
            })
            return typing.cast(types.WebsiteCompletenessResult, result.cast_to(types, types, stream_types, False, __runtime__))
    async def CoordinateAnalysisWorkflow(self, url: str,context: typing.Optional[str],priorities: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.AnalysisOrchestrationResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.CoordinateAnalysisWorkflow(url=url,context=context,priorities=priorities,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="CoordinateAnalysisWorkflow", args={
                "url": url,"context": context,"priorities": priorities,
            })
            return typing.cast(types.AnalysisOrchestrationResult, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeContentRelevance(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ContentRelevanceResult, types.ContentRelevanceResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeContentRelevance", args={
            "image": image,"html_content": html_content,"url": url,"context": context,
        })
        return baml_py.BamlStream[stream_types.ContentRelevanceResult, types.ContentRelevanceResult](
          result,
          lambda x: typing.cast(stream_types.ContentRelevanceResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ContentRelevanceResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeLanguageCapabilities(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.LanguageAnalysisResult, types.LanguageAnalysisResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeLanguageCapabilities", args={
            "image": image,"html_content": html_content,"url": url,
        })
        return baml_py.BamlStream[stream_types.LanguageAnalysisResult, types.LanguageAnalysisResult](
          result,
          lambda x: typing.cast(stream_types.LanguageAnalysisResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.LanguageAnalysisResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzePersonalDataRequests(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PersonalDataResult, types.PersonalDataResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzePersonalDataRequests", args={
            "image": image,"html_content": html_content,"url": url,
        })
        return baml_py.BamlStream[stream_types.PersonalDataResult, types.PersonalDataResult](
          result,
          lambda x: typing.cast(stream_types.PersonalDataResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PersonalDataResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzePolicyLinks(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PolicyAnalysisResult, types.PolicyAnalysisResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzePolicyLinks", args={
            "image": image,"html_content": html_content,"url": url,
        })
        return baml_py.BamlStream[stream_types.PolicyAnalysisResult, types.PolicyAnalysisResult](
          result,
          lambda x: typing.cast(stream_types.PolicyAnalysisResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PolicyAnalysisResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeUKGovTrademarksWithClaude(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.TrademarkAnalysisResult, types.TrademarkAnalysisResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeUKGovTrademarksWithClaude", args={
            "image": image,"url": url,"context": context,
        })
        return baml_py.BamlStream[stream_types.TrademarkAnalysisResult, types.TrademarkAnalysisResult](
          result,
          lambda x: typing.cast(stream_types.TrademarkAnalysisResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TrademarkAnalysisResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeUKGovernmentTrademarks(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.TrademarkAnalysisResult, types.TrademarkAnalysisResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeUKGovernmentTrademarks", args={
            "image": image,"url": url,"context": context,
        })
        return baml_py.BamlStream[stream_types.TrademarkAnalysisResult, types.TrademarkAnalysisResult](
          result,
          lambda x: typing.cast(stream_types.TrademarkAnalysisResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TrademarkAnalysisResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeWebsiteCompleteness(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.WebsiteCompletenessResult, types.WebsiteCompletenessResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeWebsiteCompleteness", args={
            "image": image,"html_content": html_content,"url": url,
        })
        return baml_py.BamlStream[stream_types.WebsiteCompletenessResult, types.WebsiteCompletenessResult](
          result,
          lambda x: typing.cast(stream_types.WebsiteCompletenessResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.WebsiteCompletenessResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def CoordinateAnalysisWorkflow(self, url: str,context: typing.Optional[str],priorities: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.AnalysisOrchestrationResult, types.AnalysisOrchestrationResult]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="CoordinateAnalysisWorkflow", args={
            "url": url,"context": context,"priorities": priorities,
        })
        return baml_py.BamlStream[stream_types.AnalysisOrchestrationResult, types.AnalysisOrchestrationResult](
          result,
          lambda x: typing.cast(stream_types.AnalysisOrchestrationResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.AnalysisOrchestrationResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeContentRelevance(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeContentRelevance", args={
            "image": image,"html_content": html_content,"url": url,"context": context,
        }, mode="request")
        return result
    async def AnalyzeLanguageCapabilities(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeLanguageCapabilities", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="request")
        return result
    async def AnalyzePersonalDataRequests(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzePersonalDataRequests", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="request")
        return result
    async def AnalyzePolicyLinks(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzePolicyLinks", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="request")
        return result
    async def AnalyzeUKGovTrademarksWithClaude(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeUKGovTrademarksWithClaude", args={
            "image": image,"url": url,"context": context,
        }, mode="request")
        return result
    async def AnalyzeUKGovernmentTrademarks(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeUKGovernmentTrademarks", args={
            "image": image,"url": url,"context": context,
        }, mode="request")
        return result
    async def AnalyzeWebsiteCompleteness(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeWebsiteCompleteness", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="request")
        return result
    async def CoordinateAnalysisWorkflow(self, url: str,context: typing.Optional[str],priorities: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="CoordinateAnalysisWorkflow", args={
            "url": url,"context": context,"priorities": priorities,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeContentRelevance(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeContentRelevance", args={
            "image": image,"html_content": html_content,"url": url,"context": context,
        }, mode="stream")
        return result
    async def AnalyzeLanguageCapabilities(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeLanguageCapabilities", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="stream")
        return result
    async def AnalyzePersonalDataRequests(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzePersonalDataRequests", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="stream")
        return result
    async def AnalyzePolicyLinks(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzePolicyLinks", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="stream")
        return result
    async def AnalyzeUKGovTrademarksWithClaude(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeUKGovTrademarksWithClaude", args={
            "image": image,"url": url,"context": context,
        }, mode="stream")
        return result
    async def AnalyzeUKGovernmentTrademarks(self, image: baml_py.Image,url: str,context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeUKGovernmentTrademarks", args={
            "image": image,"url": url,"context": context,
        }, mode="stream")
        return result
    async def AnalyzeWebsiteCompleteness(self, image: baml_py.Image,html_content: typing.Optional[str],url: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeWebsiteCompleteness", args={
            "image": image,"html_content": html_content,"url": url,
        }, mode="stream")
        return result
    async def CoordinateAnalysisWorkflow(self, url: str,context: typing.Optional[str],priorities: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="CoordinateAnalysisWorkflow", args={
            "url": url,"context": context,"priorities": priorities,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))