# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
from baml_py import type_builder
from baml_py import baml_py
# These are exports, not used here, hence the linter is disabled
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder # noqa: F401 # pylint: disable=unused-import
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME

class TypeBuilder(type_builder.TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["AnalysisOrchestrationResult","AnalysisTask","BoundingBox","ContentRelevanceResult","DataRequest","LanguageAnalysisResult","PersonalDataResult","PolicyAnalysisResult","PolicyLink","TrademarkAnalysisResult","TrademarkViolation","WebsiteCompletenessResult",]
        ), enums=set(
          ["AnalysisPriority","BusinessLegitimacy","CompletenessLevel","ComplianceLevel","ConfidenceLevel","DataSensitivity","LanguageQuality","LanguageSupport","RelevanceLevel","ViolationType",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)

    # #########################################################################
    # Generated enums 10
    # #########################################################################

    @property
    def AnalysisPriority(self) -> "AnalysisPriorityViewer":
        return AnalysisPriorityViewer(self)

    @property
    def BusinessLegitimacy(self) -> "BusinessLegitimacyViewer":
        return BusinessLegitimacyViewer(self)

    @property
    def CompletenessLevel(self) -> "CompletenessLevelViewer":
        return CompletenessLevelViewer(self)

    @property
    def ComplianceLevel(self) -> "ComplianceLevelViewer":
        return ComplianceLevelViewer(self)

    @property
    def ConfidenceLevel(self) -> "ConfidenceLevelViewer":
        return ConfidenceLevelViewer(self)

    @property
    def DataSensitivity(self) -> "DataSensitivityViewer":
        return DataSensitivityViewer(self)

    @property
    def LanguageQuality(self) -> "LanguageQualityViewer":
        return LanguageQualityViewer(self)

    @property
    def LanguageSupport(self) -> "LanguageSupportViewer":
        return LanguageSupportViewer(self)

    @property
    def RelevanceLevel(self) -> "RelevanceLevelViewer":
        return RelevanceLevelViewer(self)

    @property
    def ViolationType(self) -> "ViolationTypeViewer":
        return ViolationTypeViewer(self)


    # #########################################################################
    # Generated classes 12
    # #########################################################################

    @property
    def AnalysisOrchestrationResult(self) -> "AnalysisOrchestrationResultViewer":
        return AnalysisOrchestrationResultViewer(self)

    @property
    def AnalysisTask(self) -> "AnalysisTaskViewer":
        return AnalysisTaskViewer(self)

    @property
    def BoundingBox(self) -> "BoundingBoxViewer":
        return BoundingBoxViewer(self)

    @property
    def ContentRelevanceResult(self) -> "ContentRelevanceResultViewer":
        return ContentRelevanceResultViewer(self)

    @property
    def DataRequest(self) -> "DataRequestViewer":
        return DataRequestViewer(self)

    @property
    def LanguageAnalysisResult(self) -> "LanguageAnalysisResultViewer":
        return LanguageAnalysisResultViewer(self)

    @property
    def PersonalDataResult(self) -> "PersonalDataResultViewer":
        return PersonalDataResultViewer(self)

    @property
    def PolicyAnalysisResult(self) -> "PolicyAnalysisResultViewer":
        return PolicyAnalysisResultViewer(self)

    @property
    def PolicyLink(self) -> "PolicyLinkViewer":
        return PolicyLinkViewer(self)

    @property
    def TrademarkAnalysisResult(self) -> "TrademarkAnalysisResultViewer":
        return TrademarkAnalysisResultViewer(self)

    @property
    def TrademarkViolation(self) -> "TrademarkViolationViewer":
        return TrademarkViolationViewer(self)

    @property
    def WebsiteCompletenessResult(self) -> "WebsiteCompletenessResultViewer":
        return WebsiteCompletenessResultViewer(self)



# #########################################################################
# Generated enums 10
# #########################################################################

class AnalysisPriorityAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("AnalysisPriority")
        self._values: typing.Set[str] = set([  "CRITICAL",  "HIGH",  "MEDIUM",  "LOW",  ])
        self._vals = AnalysisPriorityValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "AnalysisPriorityValues":
        return self._vals


class AnalysisPriorityViewer(AnalysisPriorityAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class AnalysisPriorityValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def CRITICAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("CRITICAL"))
    
    @property
    def HIGH(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("HIGH"))
    
    @property
    def MEDIUM(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MEDIUM"))
    
    @property
    def LOW(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LOW"))
    
    


class BusinessLegitimacyAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("BusinessLegitimacy")
        self._values: typing.Set[str] = set([  "LEGITIMATE",  "QUESTIONABLE",  "SUSPICIOUS",  ])
        self._vals = BusinessLegitimacyValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "BusinessLegitimacyValues":
        return self._vals


class BusinessLegitimacyViewer(BusinessLegitimacyAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class BusinessLegitimacyValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def LEGITIMATE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LEGITIMATE"))
    
    @property
    def QUESTIONABLE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("QUESTIONABLE"))
    
    @property
    def SUSPICIOUS(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SUSPICIOUS"))
    
    


class CompletenessLevelAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("CompletenessLevel")
        self._values: typing.Set[str] = set([  "COMPLETE",  "MOSTLY_COMPLETE",  "PARTIALLY_COMPLETE",  "INCOMPLETE",  ])
        self._vals = CompletenessLevelValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "CompletenessLevelValues":
        return self._vals


class CompletenessLevelViewer(CompletenessLevelAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class CompletenessLevelValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def COMPLETE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("COMPLETE"))
    
    @property
    def MOSTLY_COMPLETE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MOSTLY_COMPLETE"))
    
    @property
    def PARTIALLY_COMPLETE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PARTIALLY_COMPLETE"))
    
    @property
    def INCOMPLETE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("INCOMPLETE"))
    
    


class ComplianceLevelAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("ComplianceLevel")
        self._values: typing.Set[str] = set([  "COMPLIANT",  "PARTIALLY_COMPLIANT",  "NON_COMPLIANT",  ])
        self._vals = ComplianceLevelValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "ComplianceLevelValues":
        return self._vals


class ComplianceLevelViewer(ComplianceLevelAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class ComplianceLevelValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def COMPLIANT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("COMPLIANT"))
    
    @property
    def PARTIALLY_COMPLIANT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PARTIALLY_COMPLIANT"))
    
    @property
    def NON_COMPLIANT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("NON_COMPLIANT"))
    
    


class ConfidenceLevelAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("ConfidenceLevel")
        self._values: typing.Set[str] = set([  "HIGH",  "MEDIUM",  "LOW",  ])
        self._vals = ConfidenceLevelValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "ConfidenceLevelValues":
        return self._vals


class ConfidenceLevelViewer(ConfidenceLevelAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class ConfidenceLevelValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def HIGH(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("HIGH"))
    
    @property
    def MEDIUM(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MEDIUM"))
    
    @property
    def LOW(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LOW"))
    
    


class DataSensitivityAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("DataSensitivity")
        self._values: typing.Set[str] = set([  "BASIC",  "FINANCIAL",  "IDENTITY",  "SENSITIVE",  ])
        self._vals = DataSensitivityValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "DataSensitivityValues":
        return self._vals


class DataSensitivityViewer(DataSensitivityAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class DataSensitivityValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def BASIC(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("BASIC"))
    
    @property
    def FINANCIAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("FINANCIAL"))
    
    @property
    def IDENTITY(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("IDENTITY"))
    
    @property
    def SENSITIVE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SENSITIVE"))
    
    


class LanguageQualityAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("LanguageQuality")
        self._values: typing.Set[str] = set([  "PROFESSIONAL",  "GOOD",  "BASIC",  "POOR",  ])
        self._vals = LanguageQualityValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "LanguageQualityValues":
        return self._vals


class LanguageQualityViewer(LanguageQualityAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class LanguageQualityValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def PROFESSIONAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("PROFESSIONAL"))
    
    @property
    def GOOD(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("GOOD"))
    
    @property
    def BASIC(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("BASIC"))
    
    @property
    def POOR(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("POOR"))
    
    


class LanguageSupportAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("LanguageSupport")
        self._values: typing.Set[str] = set([  "MULTILINGUAL",  "BILINGUAL",  "MONOLINGUAL",  "POOR_SUPPORT",  ])
        self._vals = LanguageSupportValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "LanguageSupportValues":
        return self._vals


class LanguageSupportViewer(LanguageSupportAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class LanguageSupportValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def MULTILINGUAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MULTILINGUAL"))
    
    @property
    def BILINGUAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("BILINGUAL"))
    
    @property
    def MONOLINGUAL(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MONOLINGUAL"))
    
    @property
    def POOR_SUPPORT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("POOR_SUPPORT"))
    
    


class RelevanceLevelAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("RelevanceLevel")
        self._values: typing.Set[str] = set([  "HIGH",  "MEDIUM",  "LOW",  ])
        self._vals = RelevanceLevelValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "RelevanceLevelValues":
        return self._vals


class RelevanceLevelViewer(RelevanceLevelAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class RelevanceLevelValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def HIGH(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("HIGH"))
    
    @property
    def MEDIUM(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("MEDIUM"))
    
    @property
    def LOW(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("LOW"))
    
    


class ViolationTypeAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("ViolationType")
        self._values: typing.Set[str] = set([  "UK_GOVERNMENT_LOGO",  "HMRC_LOGO",  "NHS_LOGO",  "GOV_UK_BRANDING",  "HMRC_COLOR_SCHEME",  "GOVERNMENTAL_DESIGN",  "COPYRIGHT_INFRINGEMENT",  ])
        self._vals = ViolationTypeValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "ViolationTypeValues":
        return self._vals


class ViolationTypeViewer(ViolationTypeAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_values(self) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [(name, type_builder.EnumValueViewer(self._bldr.value(name))) for name in self._values]
    

class ViolationTypeValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def UK_GOVERNMENT_LOGO(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("UK_GOVERNMENT_LOGO"))
    
    @property
    def HMRC_LOGO(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("HMRC_LOGO"))
    
    @property
    def NHS_LOGO(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("NHS_LOGO"))
    
    @property
    def GOV_UK_BRANDING(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("GOV_UK_BRANDING"))
    
    @property
    def HMRC_COLOR_SCHEME(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("HMRC_COLOR_SCHEME"))
    
    @property
    def GOVERNMENTAL_DESIGN(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("GOVERNMENTAL_DESIGN"))
    
    @property
    def COPYRIGHT_INFRINGEMENT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("COPYRIGHT_INFRINGEMENT"))
    
    



# #########################################################################
# Generated classes 12
# #########################################################################

class AnalysisOrchestrationResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AnalysisOrchestrationResult")
        self._properties: typing.Set[str] = set([  "recommended_sequence",  "parallel_processing_groups",  "total_estimated_duration",  "risk_assessment",  "resource_allocation",  "quality_assurance_steps",  "recommendations",  ])
        self._props = AnalysisOrchestrationResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AnalysisOrchestrationResultProperties":
        return self._props


class AnalysisOrchestrationResultViewer(AnalysisOrchestrationResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class AnalysisOrchestrationResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def recommended_sequence(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommended_sequence"))
    
    @property
    def parallel_processing_groups(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("parallel_processing_groups"))
    
    @property
    def total_estimated_duration(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("total_estimated_duration"))
    
    @property
    def risk_assessment(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("risk_assessment"))
    
    @property
    def resource_allocation(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("resource_allocation"))
    
    @property
    def quality_assurance_steps(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("quality_assurance_steps"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    


class AnalysisTaskAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AnalysisTask")
        self._properties: typing.Set[str] = set([  "task_type",  "priority",  "estimated_duration",  "dependencies",  "resource_requirements",  ])
        self._props = AnalysisTaskProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AnalysisTaskProperties":
        return self._props


class AnalysisTaskViewer(AnalysisTaskAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class AnalysisTaskProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def task_type(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("task_type"))
    
    @property
    def priority(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("priority"))
    
    @property
    def estimated_duration(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("estimated_duration"))
    
    @property
    def dependencies(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("dependencies"))
    
    @property
    def resource_requirements(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("resource_requirements"))
    
    


class BoundingBoxAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("BoundingBox")
        self._properties: typing.Set[str] = set([  "x",  "y",  "width",  "height",  ])
        self._props = BoundingBoxProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "BoundingBoxProperties":
        return self._props


class BoundingBoxViewer(BoundingBoxAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class BoundingBoxProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def x(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("x"))
    
    @property
    def y(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("y"))
    
    @property
    def width(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("width"))
    
    @property
    def height(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("height"))
    
    


class ContentRelevanceResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ContentRelevanceResult")
        self._properties: typing.Set[str] = set([  "tax_service_relevance",  "relevance_score",  "business_legitimacy",  "legitimacy_score",  "service_categories",  "professional_indicators",  "concerns",  "recommendations",  ])
        self._props = ContentRelevanceResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ContentRelevanceResultProperties":
        return self._props


class ContentRelevanceResultViewer(ContentRelevanceResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class ContentRelevanceResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def tax_service_relevance(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("tax_service_relevance"))
    
    @property
    def relevance_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("relevance_score"))
    
    @property
    def business_legitimacy(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("business_legitimacy"))
    
    @property
    def legitimacy_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("legitimacy_score"))
    
    @property
    def service_categories(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("service_categories"))
    
    @property
    def professional_indicators(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("professional_indicators"))
    
    @property
    def concerns(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("concerns"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    


class DataRequestAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("DataRequest")
        self._properties: typing.Set[str] = set([  "data_type",  "purpose",  "consent_mechanism",  "required",  ])
        self._props = DataRequestProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "DataRequestProperties":
        return self._props


class DataRequestViewer(DataRequestAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class DataRequestProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def data_type(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("data_type"))
    
    @property
    def purpose(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("purpose"))
    
    @property
    def consent_mechanism(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("consent_mechanism"))
    
    @property
    def required(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("required"))
    
    


class LanguageAnalysisResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("LanguageAnalysisResult")
        self._properties: typing.Set[str] = set([  "primary_language",  "language_support",  "language_quality",  "quality_score",  "supported_languages",  "accessibility_features",  "internationalization_indicators",  "recommendations",  ])
        self._props = LanguageAnalysisResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "LanguageAnalysisResultProperties":
        return self._props


class LanguageAnalysisResultViewer(LanguageAnalysisResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class LanguageAnalysisResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def primary_language(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("primary_language"))
    
    @property
    def language_support(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("language_support"))
    
    @property
    def language_quality(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("language_quality"))
    
    @property
    def quality_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("quality_score"))
    
    @property
    def supported_languages(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("supported_languages"))
    
    @property
    def accessibility_features(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("accessibility_features"))
    
    @property
    def internationalization_indicators(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("internationalization_indicators"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    


class PersonalDataResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PersonalDataResult")
        self._properties: typing.Set[str] = set([  "compliance_level",  "compliance_score",  "data_requests",  "gdpr_indicators",  "privacy_concerns",  "recommendations",  ])
        self._props = PersonalDataResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PersonalDataResultProperties":
        return self._props


class PersonalDataResultViewer(PersonalDataResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class PersonalDataResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def compliance_level(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("compliance_level"))
    
    @property
    def compliance_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("compliance_score"))
    
    @property
    def data_requests(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("data_requests"))
    
    @property
    def gdpr_indicators(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("gdpr_indicators"))
    
    @property
    def privacy_concerns(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("privacy_concerns"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    


class PolicyAnalysisResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PolicyAnalysisResult")
        self._properties: typing.Set[str] = set([  "privacy_policy",  "terms_conditions",  "gdpr_compliance_indicators",  "accessibility_issues",  "compliance_score",  "recommendations",  ])
        self._props = PolicyAnalysisResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PolicyAnalysisResultProperties":
        return self._props


class PolicyAnalysisResultViewer(PolicyAnalysisResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class PolicyAnalysisResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def privacy_policy(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("privacy_policy"))
    
    @property
    def terms_conditions(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("terms_conditions"))
    
    @property
    def gdpr_compliance_indicators(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("gdpr_compliance_indicators"))
    
    @property
    def accessibility_issues(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("accessibility_issues"))
    
    @property
    def compliance_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("compliance_score"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    


class PolicyLinkAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PolicyLink")
        self._properties: typing.Set[str] = set([  "text",  "url",  "accessible",  "found_method",  "location",  ])
        self._props = PolicyLinkProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PolicyLinkProperties":
        return self._props


class PolicyLinkViewer(PolicyLinkAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class PolicyLinkProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def text(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("text"))
    
    @property
    def url(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("url"))
    
    @property
    def accessible(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("accessible"))
    
    @property
    def found_method(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("found_method"))
    
    @property
    def location(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("location"))
    
    


class TrademarkAnalysisResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("TrademarkAnalysisResult")
        self._properties: typing.Set[str] = set([  "violations",  "overall_assessment",  "risk_level",  "recommendations",  ])
        self._props = TrademarkAnalysisResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "TrademarkAnalysisResultProperties":
        return self._props


class TrademarkAnalysisResultViewer(TrademarkAnalysisResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class TrademarkAnalysisResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def violations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("violations"))
    
    @property
    def overall_assessment(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("overall_assessment"))
    
    @property
    def risk_level(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("risk_level"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    


class TrademarkViolationAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("TrademarkViolation")
        self._properties: typing.Set[str] = set([  "violation_type",  "confidence",  "confidence_score",  "description",  "location",  "coordinates",  ])
        self._props = TrademarkViolationProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "TrademarkViolationProperties":
        return self._props


class TrademarkViolationViewer(TrademarkViolationAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class TrademarkViolationProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def violation_type(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("violation_type"))
    
    @property
    def confidence(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("confidence"))
    
    @property
    def confidence_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("confidence_score"))
    
    @property
    def description(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("description"))
    
    @property
    def location(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("location"))
    
    @property
    def coordinates(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("coordinates"))
    
    


class WebsiteCompletenessResultAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("WebsiteCompletenessResult")
        self._properties: typing.Set[str] = set([  "completeness_level",  "completeness_score",  "missing_elements",  "professional_indicators",  "trust_factors",  "improvement_areas",  "recommendations",  ])
        self._props = WebsiteCompletenessResultProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "WebsiteCompletenessResultProperties":
        return self._props


class WebsiteCompletenessResultViewer(WebsiteCompletenessResultAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [(name, type_builder.ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]
    


class WebsiteCompletenessResultProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties # type: ignore (we know how to use this private attribute) # noqa: F821

    
    
    @property
    def completeness_level(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("completeness_level"))
    
    @property
    def completeness_score(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("completeness_score"))
    
    @property
    def missing_elements(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("missing_elements"))
    
    @property
    def professional_indicators(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("professional_indicators"))
    
    @property
    def trust_factors(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("trust_factors"))
    
    @property
    def improvement_areas(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("improvement_areas"))
    
    @property
    def recommendations(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("recommendations"))
    
    

