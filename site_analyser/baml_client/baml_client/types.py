# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (10)
# #########################################################################

class AnalysisPriority(str, Enum):
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"

class BusinessLegitimacy(str, Enum):
    LEGITIMATE = "LEGITIMATE"
    QUESTIONABLE = "QUESTIONABLE"
    SUSPICIOUS = "SUSPICIOUS"

class CompletenessLevel(str, Enum):
    COMPLETE = "COMPLETE"
    MOSTLY_COMPLETE = "MOSTLY_COMPLETE"
    PARTIALLY_COMPLETE = "PARTIALLY_COMPLETE"
    INCOMPLETE = "INCOMPLETE"

class ComplianceLevel(str, Enum):
    COMPLIANT = "COMPLIANT"
    PARTIALLY_COMPLIANT = "PARTIALLY_COMPLIANT"
    NON_COMPLIANT = "NON_COMPLIANT"

class ConfidenceLevel(str, Enum):
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"

class DataSensitivity(str, Enum):
    BASIC = "BASIC"
    FINANCIAL = "FINANCIAL"
    IDENTITY = "IDENTITY"
    SENSITIVE = "SENSITIVE"

class LanguageQuality(str, Enum):
    PROFESSIONAL = "PROFESSIONAL"
    GOOD = "GOOD"
    BASIC = "BASIC"
    POOR = "POOR"

class LanguageSupport(str, Enum):
    MULTILINGUAL = "MULTILINGUAL"
    BILINGUAL = "BILINGUAL"
    MONOLINGUAL = "MONOLINGUAL"
    POOR_SUPPORT = "POOR_SUPPORT"

class RelevanceLevel(str, Enum):
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"

class ViolationType(str, Enum):
    UK_GOVERNMENT_LOGO = "UK_GOVERNMENT_LOGO"
    HMRC_LOGO = "HMRC_LOGO"
    NHS_LOGO = "NHS_LOGO"
    GOV_UK_BRANDING = "GOV_UK_BRANDING"
    HMRC_COLOR_SCHEME = "HMRC_COLOR_SCHEME"
    GOVERNMENTAL_DESIGN = "GOVERNMENTAL_DESIGN"
    COPYRIGHT_INFRINGEMENT = "COPYRIGHT_INFRINGEMENT"

# #########################################################################
# Generated classes (12)
# #########################################################################

class AnalysisOrchestrationResult(BaseModel):
    recommended_sequence: typing.List["AnalysisTask"]
    parallel_processing_groups: typing.List[typing.List[str]]
    total_estimated_duration: int
    risk_assessment: str
    resource_allocation: typing.List[str]
    quality_assurance_steps: typing.List[str]
    recommendations: typing.List[str]

class AnalysisTask(BaseModel):
    task_type: str
    priority: AnalysisPriority
    estimated_duration: int
    dependencies: typing.List[str]
    resource_requirements: typing.List[str]

class BoundingBox(BaseModel):
    x: int
    y: int
    width: int
    height: int

class ContentRelevanceResult(BaseModel):
    tax_service_relevance: RelevanceLevel
    relevance_score: float
    business_legitimacy: BusinessLegitimacy
    legitimacy_score: float
    service_categories: typing.List[str]
    professional_indicators: typing.List[str]
    concerns: typing.List[str]
    recommendations: typing.List[str]

class DataRequest(BaseModel):
    data_type: DataSensitivity
    purpose: str
    consent_mechanism: bool
    required: bool

class LanguageAnalysisResult(BaseModel):
    primary_language: str
    language_support: LanguageSupport
    language_quality: LanguageQuality
    quality_score: float
    supported_languages: typing.List[str]
    accessibility_features: typing.List[str]
    internationalization_indicators: typing.List[str]
    recommendations: typing.List[str]

class PersonalDataResult(BaseModel):
    compliance_level: ComplianceLevel
    compliance_score: float
    data_requests: typing.List["DataRequest"]
    gdpr_indicators: typing.List[str]
    privacy_concerns: typing.List[str]
    recommendations: typing.List[str]

class PolicyAnalysisResult(BaseModel):
    privacy_policy: typing.Optional["PolicyLink"] = None
    terms_conditions: typing.Optional["PolicyLink"] = None
    gdpr_compliance_indicators: typing.List[str]
    accessibility_issues: typing.List[str]
    compliance_score: float
    recommendations: typing.List[str]

class PolicyLink(BaseModel):
    text: str
    url: str
    accessible: bool
    found_method: str
    location: typing.Optional[str] = None

class TrademarkAnalysisResult(BaseModel):
    violations: typing.List["TrademarkViolation"]
    overall_assessment: str
    risk_level: ConfidenceLevel
    recommendations: typing.List[str]

class TrademarkViolation(BaseModel):
    violation_type: ViolationType
    confidence: ConfidenceLevel
    confidence_score: float
    description: str
    location: typing.Optional[str] = None
    coordinates: typing.Optional["BoundingBox"] = None

class WebsiteCompletenessResult(BaseModel):
    completeness_level: CompletenessLevel
    completeness_score: float
    missing_elements: typing.List[str]
    professional_indicators: typing.List[str]
    trust_factors: typing.List[str]
    improvement_areas: typing.List[str]
    recommendations: typing.List[str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
