# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeContentRelevance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ContentRelevanceResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeContentRelevance", llm_response=llm_response, mode="request")
        return typing.cast(types.ContentRelevanceResult, result)

    def AnalyzeLanguageCapabilities(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.LanguageAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeLanguageCapabilities", llm_response=llm_response, mode="request")
        return typing.cast(types.LanguageAnalysisResult, result)

    def AnalyzePersonalDataRequests(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PersonalDataResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePersonalDataRequests", llm_response=llm_response, mode="request")
        return typing.cast(types.PersonalDataResult, result)

    def AnalyzePolicyLinks(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PolicyAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePolicyLinks", llm_response=llm_response, mode="request")
        return typing.cast(types.PolicyAnalysisResult, result)

    def AnalyzeUKGovTrademarksWithClaude(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TrademarkAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeUKGovTrademarksWithClaude", llm_response=llm_response, mode="request")
        return typing.cast(types.TrademarkAnalysisResult, result)

    def AnalyzeUKGovernmentTrademarks(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TrademarkAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeUKGovernmentTrademarks", llm_response=llm_response, mode="request")
        return typing.cast(types.TrademarkAnalysisResult, result)

    def AnalyzeWebsiteCompleteness(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.WebsiteCompletenessResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeWebsiteCompleteness", llm_response=llm_response, mode="request")
        return typing.cast(types.WebsiteCompletenessResult, result)

    def CoordinateAnalysisWorkflow(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.AnalysisOrchestrationResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CoordinateAnalysisWorkflow", llm_response=llm_response, mode="request")
        return typing.cast(types.AnalysisOrchestrationResult, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeContentRelevance(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ContentRelevanceResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeContentRelevance", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ContentRelevanceResult, result)

    def AnalyzeLanguageCapabilities(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.LanguageAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeLanguageCapabilities", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.LanguageAnalysisResult, result)

    def AnalyzePersonalDataRequests(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PersonalDataResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePersonalDataRequests", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PersonalDataResult, result)

    def AnalyzePolicyLinks(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PolicyAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePolicyLinks", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PolicyAnalysisResult, result)

    def AnalyzeUKGovTrademarksWithClaude(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TrademarkAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeUKGovTrademarksWithClaude", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TrademarkAnalysisResult, result)

    def AnalyzeUKGovernmentTrademarks(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TrademarkAnalysisResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeUKGovernmentTrademarks", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TrademarkAnalysisResult, result)

    def AnalyzeWebsiteCompleteness(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.WebsiteCompletenessResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeWebsiteCompleteness", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.WebsiteCompletenessResult, result)

    def CoordinateAnalysisWorkflow(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.AnalysisOrchestrationResult:
        result = self.__options.merge_options(baml_options).parse_response(function_name="CoordinateAnalysisWorkflow", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.AnalysisOrchestrationResult, result)

    