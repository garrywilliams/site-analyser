# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (12)
# #########################################################################

class AnalysisOrchestrationResult(BaseModel):
    recommended_sequence: typing.List["AnalysisTask"]
    parallel_processing_groups: typing.List[typing.List[str]]
    total_estimated_duration: typing.Optional[int] = None
    risk_assessment: typing.Optional[str] = None
    resource_allocation: typing.List[str]
    quality_assurance_steps: typing.List[str]
    recommendations: typing.List[str]

class AnalysisTask(BaseModel):
    task_type: typing.Optional[str] = None
    priority: typing.Optional[types.AnalysisPriority] = None
    estimated_duration: typing.Optional[int] = None
    dependencies: typing.List[str]
    resource_requirements: typing.List[str]

class BoundingBox(BaseModel):
    x: typing.Optional[int] = None
    y: typing.Optional[int] = None
    width: typing.Optional[int] = None
    height: typing.Optional[int] = None

class ContentRelevanceResult(BaseModel):
    tax_service_relevance: typing.Optional[types.RelevanceLevel] = None
    relevance_score: typing.Optional[float] = None
    business_legitimacy: typing.Optional[types.BusinessLegitimacy] = None
    legitimacy_score: typing.Optional[float] = None
    service_categories: typing.List[str]
    professional_indicators: typing.List[str]
    concerns: typing.List[str]
    recommendations: typing.List[str]

class DataRequest(BaseModel):
    data_type: typing.Optional[types.DataSensitivity] = None
    purpose: typing.Optional[str] = None
    consent_mechanism: typing.Optional[bool] = None
    required: typing.Optional[bool] = None

class LanguageAnalysisResult(BaseModel):
    primary_language: typing.Optional[str] = None
    language_support: typing.Optional[types.LanguageSupport] = None
    language_quality: typing.Optional[types.LanguageQuality] = None
    quality_score: typing.Optional[float] = None
    supported_languages: typing.List[str]
    accessibility_features: typing.List[str]
    internationalization_indicators: typing.List[str]
    recommendations: typing.List[str]

class PersonalDataResult(BaseModel):
    compliance_level: typing.Optional[types.ComplianceLevel] = None
    compliance_score: typing.Optional[float] = None
    data_requests: typing.List["DataRequest"]
    gdpr_indicators: typing.List[str]
    privacy_concerns: typing.List[str]
    recommendations: typing.List[str]

class PolicyAnalysisResult(BaseModel):
    privacy_policy: typing.Optional["PolicyLink"] = None
    terms_conditions: typing.Optional["PolicyLink"] = None
    gdpr_compliance_indicators: typing.List[str]
    accessibility_issues: typing.List[str]
    compliance_score: typing.Optional[float] = None
    recommendations: typing.List[str]

class PolicyLink(BaseModel):
    text: typing.Optional[str] = None
    url: typing.Optional[str] = None
    accessible: typing.Optional[bool] = None
    found_method: typing.Optional[str] = None
    location: typing.Optional[str] = None

class TrademarkAnalysisResult(BaseModel):
    violations: typing.List["TrademarkViolation"]
    overall_assessment: typing.Optional[str] = None
    risk_level: typing.Optional[types.ConfidenceLevel] = None
    recommendations: typing.List[str]

class TrademarkViolation(BaseModel):
    violation_type: typing.Optional[types.ViolationType] = None
    confidence: typing.Optional[types.ConfidenceLevel] = None
    confidence_score: typing.Optional[float] = None
    description: typing.Optional[str] = None
    location: typing.Optional[str] = None
    coordinates: typing.Optional["BoundingBox"] = None

class WebsiteCompletenessResult(BaseModel):
    completeness_level: typing.Optional[types.CompletenessLevel] = None
    completeness_score: typing.Optional[float] = None
    missing_elements: typing.List[str]
    professional_indicators: typing.List[str]
    trust_factors: typing.List[str]
    improvement_areas: typing.List[str]
    recommendations: typing.List[str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################
